// routes/portfolio.js
import express from "express";
import Portfolio from "../models/Portfolio.js";
import { verifyToken } from "../middlewares/auth.js";

const router = express.Router();

// âž• CrÃ©er ou mettre Ã  jour le portfolio de lâ€™utilisateur (upsert)
router.post("/", verifyToken, async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) return res.status(400).json({ error: "Utilisateur non identifiÃ©" });

    // ðŸ”¹ PrÃ©parer le payload
    const payload = {
      ...req.body,
      user: userId,
    };

    // ðŸ”¹ Upsert : crÃ©er ou mettre Ã  jour le portfolio
    const portfolio = await Portfolio.findOneAndUpdate(
      { user: userId },           // recherche par user
      { $set: payload },          // mise Ã  jour du contenu
      { upsert: true, new: true } // crÃ©ation si absent + renvoie le doc mis Ã  jour
    );

    res.status(200).json(portfolio);
  } catch (err) {
    console.error("Erreur crÃ©ation/mise Ã  jour portfolio:", err);
    // ðŸ”¹ Si problÃ¨me d'unicitÃ© persiste, informer
    if (err.code === 11000) {
      return res.status(400).json({ error: "Portfolio dÃ©jÃ  existant pour cet utilisateur" });
    }
    res.status(500).json({ error: "Erreur crÃ©ation/mise Ã  jour portfolio" });
  }
});

// ðŸŸ¢ RÃ©cupÃ©rer le portfolio de lâ€™utilisateur connectÃ©
router.get("/me", verifyToken, async (req, res) => {
  try {
    const portfolio = await Portfolio.findOne({ user: req.user.id });
    if (!portfolio) return res.status(404).json({ error: "Portfolio introuvable" });
    res.json(portfolio);
  } catch (err) {
    console.error("Erreur rÃ©cupÃ©ration portfolio:", err);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// ðŸ“¦ RÃ©cupÃ©rer tous les portfolios (optionnel)
router.get("/", async (_req, res) => {
  try {
    const portfolios = await Portfolio.find();
    res.json(portfolios);
  } catch (err) {
    res.status(500).json({ error: "Erreur lecture portfolios" });
  }
});

export default router;
